首先对上一讲的shape_wrapper类进行优化
template <typename T>
class smart_ptr {
public:
  explicit smart_ptr(T* ptr = nullptr)
    : ptr_(ptr) {}
  ~smart_ptr()
  {
    delete ptr_;
  }
  T* get() const { return ptr_; }
private:
  T* ptr_;
};

针对三个点进行优化
1、它不能用 * 运算符解引用
2、它不能用 -> 运算符指向对象成员
3、它不能像指针一样用在布尔表达式里
template <typename T>
class smart_ptr {
public:
  …
  T& operator*() const { return *ptr_; }
  T* operator->() const { return ptr_; }
  operator bool() const { return ptr_; }
}





















